// Imports
const AWS = require('aws-sdk');
const express = require('express');
const { v4: uuidv4 } = require('uuid');
const Bluebird = require('bluebird');

// Express
const router = express.Router();

// AWS
const AWS_REGION_NAME = 'ap-southeast-1';
AWS.config.update({ region: AWS_REGION_NAME });
const s3 = new AWS.S3();

// Constants
const { PHOTO_BUCKET_NAME } = process.env;
const LINK_EXPIRY = 300; // in seconds

/**
 * @api {get} /photos/presigned-url
 * @apiVersion 0.1.0
 * @apiName obtainS3UploadLink
 * @apiGroup Photos
 * @apiDescription This endpoint calls the S3 API to get a presigned URL for the frontend to
 * upload a photo to.
 *
 * This method currently resides in the Photos group, but it might be merged into HealthReport.
 * @apiPermission To be decided
 *
 * @apiError To be decided
 *
 * @apiHeader To be decided
 *
 * @apiParam To be decided
 *
 * @apiSuccess {String} photo_s3_key S3 path of that the photo is stored in
 * @apiSuccess {String} presigned_url PreSigned URL generated by AWS SDK that the client puts to
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       "photo_s3_key": "test",
 *       "presigned_url": "https://test.s3.ap-southeast-1.amazonaws.com/testAWSAccessKeyId=testExpires=test&Signature=test"
 *     }
 */
async function obtainS3UploadLink(req, res) {
  // We might need an agency identifier to separate photos from different groups of users
  const photoS3Key = `photo_${uuidv4()}`;

  try {
    // Construct a request
    const params = {
      Bucket: PHOTO_BUCKET_NAME,
      Key: photoS3Key,
      Expires: LINK_EXPIRY,
    };

    const getSignedUrlPromisified = Bluebird.promisify(s3.getSignedUrl.bind(s3));
    const preSignedUrl = await getSignedUrlPromisified('putObject', params);

    res.status(200).send({
      photo_s3_key: photoS3Key,
      presigned_url: preSignedUrl,
    });
  } catch (err) {
    res.status(500).send(err.message);
  }
}

router.get('/presigned-url', obtainS3UploadLink); // This needs to include auth middleware later

module.exports = router;
